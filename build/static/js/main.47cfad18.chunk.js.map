{"version":3,"sources":["Input.js","BaseConvertor.js","App.js","serviceWorker.js","index.js"],"names":["Label","baseId","className","Input","props","number","value","isNaN","toString","onChange","e","target","BaseConvertor","state","bind","base","split","every","digit","Number","isInteger","parseInt","isValidNumberForBase","this","setState","inputSections","Array","count","keys","map","id","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAEMA,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACZ,yBAAKC,UAAU,SACb,sCAAYD,EAAZ,OAgBWE,EAZD,SAACC,GAAW,IAChBH,EAAmBG,EAAnBH,OAAQI,EAAWD,EAAXC,OACVC,EAAQC,MAAMF,GAAU,GAAKA,EAAOG,SAASP,GAEnD,OACE,yBAAKC,UAAU,gBACb,kBAAC,EAAD,CAAOD,OAAQA,IACf,2BAAOK,MAAOA,EAAOG,SAAU,SAACC,GAAD,OAAON,EAAMK,SAASC,EAAEC,OAAQV,QC2BtDW,E,kDAhCb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CAAER,OAAQ,GACvB,EAAKI,SAAW,EAAKA,SAASK,KAAd,gBAHC,E,uDAMCb,GAAS,IAAlBK,EAAiB,EAAjBA,OAbgB,SAAUA,EAAOS,GAC5C,OAAOT,EACJU,MAAM,IACNC,OAAM,SAACC,GAAD,OAAWC,OAAOC,UAAUC,SAASH,EAAOH,QAW/CO,CAAqBhB,EAAOL,IAC9BsB,KAAKC,SAAS,CAAEnB,OAAQgB,SAASf,EAAOL,O,+BAIlC,IAAD,OAEDwB,EADO,YAAOC,MAAMH,KAAKnB,MAAMuB,MAAQ,GAAGC,QAClBC,KAAI,SAACC,GAAD,OAChC,kBAAC,EAAD,CACEC,IAAKD,EACL7B,OAAQ6B,EAAK,EACbzB,OAAQ,EAAKQ,MAAMR,OACnBI,SAAU,EAAKA,cAInB,OACE,yBAAKP,UAAU,aACb,6CACCuB,O,GA3BmBO,IAAMC,WCDnBC,G,MAJH,SAAC9B,GACX,OAAO,kBAAC,EAAD,CAAeuB,MAAO,OCOXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47cfad18.chunk.js","sourcesContent":["import React from 'react';\n\nconst Label = ({ baseId }) => (\n  <div className=\"label\">\n    <label>Base{baseId} </label>\n  </div>\n);\n\nconst Input = (props) => {\n  const { baseId, number } = props;\n  const value = isNaN(number) ? '' : number.toString(baseId);\n\n  return (\n    <div className=\"inputSection\">\n      <Label baseId={baseId} />\n      <input value={value} onChange={(e) => props.onChange(e.target, baseId)} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from './Input';\n\nconst isValidNumberForBase = function (value, base) {\n  return value\n    .split('')\n    .every((digit) => Number.isInteger(parseInt(digit, base)));\n};\n\nclass BaseConvertor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { number: 0 };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange({ value }, baseId) {\n    if (isValidNumberForBase(value, baseId)) {\n      this.setState({ number: parseInt(value, baseId) });\n    }\n  }\n\n  render() {\n    const baseIds = [...Array(this.props.count - 1).keys()];\n    const inputSections = baseIds.map((id) => (\n      <Input\n        key={id}\n        baseId={id + 2}\n        number={this.state.number}\n        onChange={this.onChange}\n      />\n    ));\n\n    return (\n      <div className=\"container\">\n        <h1>BaseConvertor</h1>\n        {inputSections}\n      </div>\n    );\n  }\n}\n\nexport default BaseConvertor;\n","import React from 'react';\nimport BaseConvertor from './BaseConvertor';\nimport './App.css';\n\nconst App = (props) => {\n  return <BaseConvertor count={16} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}